/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica1compi;

import com.sun.javafx.scene.control.skin.VirtualFlow;
import com.sun.javafx.scene.control.skin.VirtualFlow.ArrayLinkedList;
import java.util.LinkedList;

/**
 *
 * @author JUAN DIEGO ALVARADO
 */
public class Archivo extends javax.swing.JFrame {

    /**
     * Creates new form Archivo
     */
    public Archivo() {
         
        initComponents();
    } int Estado=0; 
     public  String ContadorLexico="";  
     public  String ContadorLexico2="";  
     
     LinkedList<Palabras> TokensA = new LinkedList<>();
ArrayLinkedList<NodoArbol> Nodos = new ArrayLinkedList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar3.add(jMenu6);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Analizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Texto a Analizar");

        jMenu3.setText("Abrir");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jButton2)
                        .addGap(55, 55, 55)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(400, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Scan(jTextArea1.getText());
  
        for (NodoArbol palabras :Nodos) {
            System.out.println("Nodo"+":"+palabras.getContenido()+":"+palabras.getTipo());
        }
 
        for (Palabras palabras :TokensA) {
            System.out.println("Lexema"+":"+":"+palabras.getLexema());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GenerarArbol(Nodos);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
 
    
   private void GenerarArbol(ArrayLinkedList Nodos){
       int aux=this.Nodos.size()-1;
  while (this.Nodos.size()>1){
      if(this.Nodos.get(aux).getTipo().equals("Terminal")) {
          
        if(this.Nodos.get(aux).getContenido().equals(".") ||this.Nodos.get(aux).getContenido().equals("|") ) {
                NodoArbol nAux = new NodoArbol(this.Nodos.get(aux), this.Nodos.get(aux+1), this.Nodos.get(aux+2));
                this.Nodos.remove(aux+2);
                this.Nodos.remove(aux+1); 
                this.Nodos.remove(aux);
                this.Nodos.addLast(nAux);
                this.Nodos.get(aux).setTipo("NoTerminal");
        }else  { 
            NodoArbol nAux = new NodoArbol(this.Nodos.get(aux),this.Nodos.get(aux +1),null);
            this.Nodos.remove(aux);
            this.Nodos.remove(aux);
            this.Nodos.addLast(nAux);
            this.Nodos.get(aux).setTipo("NoTerminal");
            
              
          }
           aux=this.Nodos.size()-1; 
        }
      aux--;
          
      }
       System.out.println("Aqui");
       recorridoPreorden();
      
  }
   // EMPIEZA EL RECORRIDO EN PREORDEN
    public synchronized void recorridoPreorden()
    {
        ayudantePreorden(this.Nodos.get(0));
    }
    //meoto recursivo para recorrido en preorden
    
    private void ayudantePreorden(NodoArbol nodo)
    {
        if(nodo == null)
            return;
        
        ayudantePreorden(nodo.getIzquierda());   //recorre subarbol izquierdo        
        System.out.print(nodo.getContenido() + " ");     //mostrar datos del nodo
        ayudantePreorden(nodo.getDerecha());     //recorre subarbol derecho
        
    }
    
    
    
    private void Scan(String E){

    char c= ' ';
    
        for (int i = 0; i < E.length()-1; i++) {
        c= E.charAt(i);
        
         switch (Estado){
             
             case 0:
          
                 if(Character.isLetter(c))  
             {
                 ContadorLexico+=c;
                     Estado =1;
                 }
                 else if (c=='/') {
                     Estado=2;
            
                 }
                 else if (c==0) {
                     System.out.println("guion");
                     ContadorLexico+=c;
                     Estado=8;
            
                 }
                 else if (c=='~') {
                    ContadorLexico+=c;
                     Agregar(ContadorLexico, Palabras.Tipo.Intervalo);
                       ContadorLexico="";
                 }
                 else if (c=='<') {
                     
                     ContadorLexico+=c;
                     Estado=4;
                 }
                 else if (c == ('\u0022')) {
       
                     ContadorLexico+=c;
                     Estado=6;
                 }
                 else if (Character.isDigit(c)) {
                   i--;
                   Estado=7;
                     
                 }
                    else if (c=='\n') {
                   Estado=0;
                     
                 }
                    
                       else if (c==' ') {
                   Estado=0;
                     
                 }
                    else if (ContadorLexico.equals(';')) {
                        ContadorLexico+=c;
                     Agregar(ContadorLexico, Palabras.Tipo.PuntoyComa);
                   ContadorLexico="";
                    }
                 
                 
                  else if (c==':') {
                     ContadorLexico+=c;
                     Agregar(ContadorLexico, Palabras.Tipo.DosPuntos);
                        ContadorLexico="";
                 } 
                 
                  else if (c=='.') {
                     ContadorLexico+=c;
                     Agregar(ContadorLexico, Palabras.Tipo.Concatenacion);
                 
                     AgregarNodo(ContadorLexico, "Terminal");
                      
                    Estado=0;
                     ContadorLexico="";
                 } 
                  else if (c=='|') {
                     ContadorLexico+=c;
                     Agregar(ContadorLexico, Palabras.Tipo.OR);
                     AgregarNodo(ContadorLexico, "Terminal");
                 Estado=0;
                     ContadorLexico="";
    
                 } 
                         
                  
                  else if (c==',') {
                     ContadorLexico+=c;
                   
                      Agregar(ContadorLexico, Palabras.Tipo.Coma);
                        ContadorLexico="";
    
                 } else if (c=='+') {
                     ContadorLexico+=c;
                   
                      Agregar(ContadorLexico, Palabras.Tipo.Mas);
                         AgregarNodo(ContadorLexico, "Terminal");
                  Estado=0;
                     
                      ContadorLexico="";
    
                 } 
                 
                  else if (c=='*') {
                     ContadorLexico+=c;
                   
                      Agregar(ContadorLexico, Palabras.Tipo.Asterisco);
                      
                         AgregarNodo(ContadorLexico, "Terminal");
                      Estado=0;
                     
                         ContadorLexico="";
      
                 }else if (c=='-') {
                     ContadorLexico+=c;
                 Estado=8;
                     
                 }
                  else if (c=='{') {
                  
                      ContadorLexico+=c;
         
                     
                     Agregar2(ContadorLexico, Palabras.Tipo.LLaveAbierta);
                        ContadorLexico="";
    Estado=9;
                        
                 }
                 
                   else if (c=='}') {
                     ContadorLexico+=c;
                   
                      Agregar(ContadorLexico, Palabras.Tipo.LlaveCerrada);
                        ContadorLexico="";
      
                 } 
                  else if (c=='>') {
                     ContadorLexico+=c;
                   
                      Agregar(ContadorLexico, Palabras.Tipo.FinComentario);
         ContadorLexico="";
                     
                 }
                  
                  
                     else if (c==';') {
                     ContadorLexico+=c;
                   
                      Agregar(ContadorLexico, Palabras.Tipo.PuntoyComa);
         ContadorLexico="";
                     
                 }
                           else if (c=='?') {
                     ContadorLexico+=c;
                   
                      Agregar(ContadorLexico, Palabras.Tipo.Interroga);
        
                         AgregarNodo(ContadorLexico, "Terminal");
                      ContadorLexico="";
                     
                 }
                     else{
                      System.out.println("error "+ContadorLexico);
                  }
                 break;
             case 1:
                 if (Character.isLetter(c)) {
                     Estado =1;
                     ContadorLexico +=c;
            
                 }
                 else if ("CONJ".equals(c) ){
      
                     Agregar(ContadorLexico, Palabras.Tipo.Conjunto);
                    
                     i--;               
                 ContadorLexico="";
                 }
                 else if (c=='-') {
                     Agregar(ContadorLexico, Palabras.Tipo.ConjuntoT);
                ContadorLexico="";
                 }  
                 else{
                      Agregar(ContadorLexico, Palabras.Tipo.Id);
                  
                     i--;         
                 ContadorLexico="";
                 }
           break;   
             case 2:  
                 
                 if (c=='/') {
          
                     ContadorLexico="";
                     Estado=3;
                     
                 }
                 
                 break;
             case 3:           
                 if (c=='\n') {

                     Agregar(ContadorLexico, Palabras.Tipo.ComentarioDeLinea);
                  ContadorLexico="";
                 }
          else  {
                   ContadorLexico+=c;      
                 

                     Estado=3;}
            break;
             case 4:
                 if (c=='!') {

                     Estado=5;
              
                 }
                 
                 break;
             case 5:           ContadorLexico+=c;
                 if (c=='!') {
                     Agregar(ContadorLexico, Palabras.Tipo.Comentario);
                    ContadorLexico="";
                 }
                 else{
                     ContadorLexico+=c;

                     Estado=5;
                 }
                 break;
                 
             case 6:

                     ContadorLexico+=c;
               
                 if (c == ('\u0022')) {
                     
                     Agregar(ContadorLexico, Palabras.Tipo.Comillas);
                     AgregarNodo(ContadorLexico, "NoTerminal");
                     Estado=0;
                     ContadorLexico="";
                 }
                 else{
                    
                     Estado=6;
                 }
                 break;
             case 7:
                 if (Character.isDigit(c)) {
                     ContadorLexico+=c;
                     Estado=7;
                 }else{
                     Agregar(ContadorLexico, Palabras.Tipo.Digito);
                     
                        ContadorLexico="";
                     i--;
                 }
             case 8:
                 System.out.println("estado8");
                 ContadorLexico+=c;
                 if (c=='>') {
                     ContadorLexico+=c;
                     Agregar(ContadorLexico, Palabras.Tipo.Flecha);
                 }else{
                     System.out.println("error");
                 }
                 
                 break;
             case 9:
               
                   if (Character.isLetter(c)) {
                     Estado =9;
                     ContadorLexico +=c;
            
                 }
                 else if (c=='}' ){
      
                     AgregarNodo(ContadorLexico, "NoTerminal");
                    
                Estado=0;
                ContadorLexico="";
                 }
               
                 
         break;
         }
         
        }
 }
    private void Agregar(String ContadorLexico,Palabras.Tipo tipo){
        TokensA.addLast(new Palabras(ContadorLexico, tipo));
        Estado=0;
          }
    private void Agregar2(String ContadorLexico,Palabras.Tipo tipo){
        TokensA.addLast(new Palabras(ContadorLexico, tipo));
      
          }
       
    
    
    
    
    
    
    
    
    
    private void AgregarNodo(String Nodo,String tipo){
        Nodos.addLast(new NodoArbol(ContadorLexico,tipo));
       
    }
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Archivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Archivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Archivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Archivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Archivo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
